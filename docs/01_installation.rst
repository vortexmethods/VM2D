Установка VM2D
==============

.. Краткие инструкции по установке пакета **VM2D** приведены на 
.. `GitHub-странице проекта <https://github.com/vortexmethods/VM2D>`_

В этом разделе приведены необходимые сведения, описывающие процедуру установки **VM2D** на Ваш компьютер.

Возможна установка как на компьютеры под управлением *Linux*, так и *Windows*.


Необходимое программное обеспечение
-----------------------------------

Для компиляции **VM2D** требуется наличие установленных: 

* системы автоматизации сборки программного обеспечения из исходного кода `cmake <https://cmake.org/>`_,
* компилятора с языка C++, поддерживающего технологию *OpenMP* и стандарт *С++11*,
* библиотеки *MPI*, например, `Open MPI <https://www.open-mpi.org/>`_ или `Microsoft MPI <https://docs.microsoft.com/en-us/message-passing-interface/microsoft-mpi>`_,
* библиотеки `Eigen <http://eigen.tuxfamily.org>`_ (не обязательно, исходные коды находятся в папке "include"),
* при наличии в системе графического процессора *Nvidia*, поддерживающего технологию `CUDA <https://ru.wikipedia.org/wiki/CUDA>`_, для его использования необходим `CUDA Toolkit <https://developer.nvidia.com/cuda-toolkit>`_.

Для просмотра результатов моделирования удобно использовать `Paraview <https://www.paraview.org/>`_.


Загрузка исходных кодов
-----------------------

Для установки программы **VM2D** на комьютере необходимо загрузить исходные коды программы.
Если на Вашем компьютере установлен *Git*, достаточно исполнить команду 

      ``git clone https://github.com/vortexmethods/VM2D.git VM2D``

по результатам работы которой в текущей папке будет создана подпапка ``VM2D`` и в нее будут загружены все файлы из репозитория, включая исходные коды, примеры решаемых задач, скрипты и т.п.	  
	  
Если *Git* на Вашем компьютере не установлен, исходные коды могут быть загружены непосредственно с `GitHub-страницы проекта VM2D <https://github.com/vortexmethods/VM2D>`_


Подготовка к установке
----------------------
  
Подготовка к компияции исходных кодов предполагает создание папки ``build`` в каталоге с загруженными исходными кодами, переход в эту папку и выполнение команды 

      ``cmake ..``
	  
При необходимости следует указать ключи для настройки используемых компиляторов, указания опций компиляции и т.п., возможно, потребуется также некоторая модификация файла ``CMakeLists.txt``, содержащего параметры настройки *CMake* и располагающегося в корневом каталоге.

В частности, для подготовки исходных кодов для их последующей компиляции в *Windows* средствами *MS Visual Studio* следует, в зависимости от версии, использовать одну из следующих команд (опция ``Win64`` обязательна для использования возможности проведения вычислений на графических картах *Nvidia CUDA*, для *Visual Studio 2019* она включена по умолчанию для 64-битных систем)

      ``cmake -G"Visual Studio 14 2015 Win64" ..``
	  
      ``cmake -G"Visual Studio 15 2017 Win64" ..``
	  
      ``cmake -G"Visual Studio 16 2019" ..``
	  
	  
В случае использования в *Windows* компилятора, отличного от используемого по умолчанию (как правило, встроенного в *MS Visual Studio* компилятора *MSVC*), например, компилятора *Intel*, при подготовке исходных кодов к компиляции необходимо указать, в зависимости от версии, ключ (отметим, что Intel C++ Compiler 19 интегрируется в Visual Studio 2019 лишь начиная с версии Upd.4)
	  
      ``-T"Intel C++ Compiler <ver>"``
	  
В *Linux*, если требуется использовать вместо компилятора *gcc/g++* какой-либо другой, к примеру, компилятор *Intel* (*icpc*), следует исполнить команду

	  ``CXX=icpc camke ..``	  
  

Компиляция исходных кодов
-------------------------	  
	  
Процедура компиляции зависит от используемой операционной системы. 

В *Windows*, как правило, при помощи *CMake* создается проект для его поледующего открытия и компиляции средствами *MS Visual Studio* (см. выше). 

В *Linux* достаточно исполнения из созданной папки команды

      ``make``

Если компиляция (в *Linux*) завершается ошибкой, связанной с отсутствием необходимых библиотек *MPI*, можно попробовать очистить папку ``build``, перейти в нее и вместо команды ``cmake ..`` исполнить одну из следующих команд

      ``CXX=mpiCC cmake ..``
	  
	  ``CXX=mpiicpc cmake ..``
	  	  
и после ее успешного выполнения повторить компиляцию при помощи команды ``make``.	  

	  
	 
Выполнение расчетов на видеокартах (Nvidia CUDA)
------------------------------------------------
	 
При наличии в системе установленного `CUDA Toolkit <https://developer.nvidia.com/cuda-toolkit>`_ в ходе работы ``cmake`` программа будет автоматически сконфигурирована для счета с использованием возможностей графических карт, работающих по технологии *NVidia CUDA*.

 
При выполнении расчетов на узле, на котором установлено несколько видеокарт, по умолчанию все расчеты будут производиться на устройстве с индексом ``#0``. Чтобы этого избежать, нужно открыть файл исходного кода ``VM2D/src/VM2D/Gpu2D/Gpu2D.cpp``, прочитать написанные в нем комментарии и откомментировать нужную строку.
	 
Если при наличии установленного *CUDA Toolkit* планируется производить расчет на центральных процессорах, не привлекая возможности GPU, то в файле ``CMakeLists.txt`` требуется закомментировать строку

      ``add_definitions(-DUSE_CUDA)``
	  
добавив перед ней знак ``#``, чтобы получилось
	  
	  ``#add_definitions(-DUSE_CUDA)``	

