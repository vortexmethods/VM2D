Содержание рабочего каталога 
============================

Чтобы начать работу с **VM2D** необходимо подготовить *рабочий каталог*.
Рабочий каталог обязательно должен содержать 4 текстовых файла:

*     ``problems``
*     ``defaults``
*     ``switchers``
*     ``mechanics``

Примеры таких файлов содержатся в папке *run* исходного репозитория.

С использованием **VM2D** возможно как решение одной-единственной задачи, так и решение серии сходных (или даже совершенно различных) задач. Каждая из решаемых задач обозначается некоторой *меткой* (именем), представляющим собой текстовую строку, и каждой для каждой задачи в рабочем каталоге должны быть созданы подкаталоги с именами, идентичными меткам задач.


Файл ``problems``
-----------------

Метки всех задач, которые предполагаются к решению, должны быть перечислены в файле ``problems``, располагающемся в рабочем каталоге. Рядом с меткой каждой задачи в круглых скобках указываются параметры ее запуска, а также могут быть перечислены некоторые параметры, которые будут переданы в *паспорт* задачи. Типичная структура файла ``problems`` представлена ниже.

.. code-block:: c
   :caption: problems
   :name: problems
	
   /*--------------------------------*- VM2D -*-----------------*---------------*\
   | ##  ## ##   ##  ####  #####   |                            | Version 1.11   |
   | ##  ## ### ### ##  ## ##  ##  |  VM2D: Vortex Method       | 2022/08/07     |
   | ##  ## ## # ##    ##  ##  ##  |  for 2D Flow Simulation    *----------------*
   |  ####  ##   ##   ##   ##  ##  |  Open Source Code                           |
   |   ##   ##   ## ###### #####   |  https://www.github.com/vortexmethods/VM2D  |
   |                                                                             |
   | Copyright (C) 2017-2022 Ilia Marchevsky, Kseniia Sokol, Evgeniya Ryatina    |
   *-----------------------------------------------------------------------------*
   | File name: problems                                                         |
   | Info: Problems to be solved by using VM2D                                   |
   \*---------------------------------------------------------------------------*/
   problems = {
       wing00deg(np = 1, angle =  0, tau = 1.5e-2),
       wing05deg(np = 2, angle =  5, tau = 1.5e-2),
       wing10deg(np = 2, angle = 10, tau = 2.0e-2)
   };

В данном примере перечислены три задачи: ``wing00deg``, ``wing05deg`` и ``wing10deg``, для каждой из которых в скобках указаны параметры, с которыми они запускаются. 

Обязательных параметров нет, поэтому в простейшем случае скобки могут быть пустыми (в этом случае их можно опустить). На процедуру запуска счета задачи окащывают влияние два параметра:

+-----------+-------------+------------------------------------+
| Название  | Значение по | Описание                           |
| параметра | умолчанию   |                                    |
+===========+=============+====================================+
| pspfile   | passport    | имя файла, в котором содержится    |
|           |             | *паспорт* решаемой задачи в ее     |
|           |             | подкаталоге                        |
+-----------+-------------+------------------------------------+
| np        | 1           | количество MPI-процессов, которые  |
|           |             | будут порождены для решения задачи |
+-----------+-------------+------------------------------------+

При запуске расчетов на многоузловом вычислительном кластере, когда каждый узел представляет собой систему с общей памятью, целесообразно запускать лишь один *MPI*-процесс на узел, поскольку внутри узла автоматически будут задействованы все его ядра с помощью технологии *OpenMP*.

Все прочие параметры (в рассмотренном выше примере к таковым относятся *angle* и *tau*) могут задаваться пользователем произвольно и иметь любой тип - целое число, число с плавающей точкой, булевское значение, строка, а также список. Их задание может быть удобно для дальнейшего использования внутри *паспортов* расчетов.




Файл ``defaults``
-----------------

В пакете **VM2D** реализовано три уровня приоритетов для значений различных параметров. 

1. **Низший приоритет.** Для некоторых параметров значения по умолчанию заданы непосредственно в исходном коде программы. К таковым, в частности, относятся вышеуказанные параметры *pspfile* и *np*. 

2. **Средний приоритет.** Пользователь может произвольно по своему усмотрению задать значения по умолчанию для некоторых параметров в файле ``defaults``, чтобы затем явно не указывать их в паспортах конкретных расчетов. Файл, как и остальные, организован в виде словаря, содержащего пары ``ключ = значение``. Пример структуры этого файла указан ниже.

.. code-block:: c
   :caption: defaults
   :name: defaults
	
   /*--------------------------------*- VM2D -*-----------------*---------------*\
   | ##  ## ##   ##  ####  #####   |                            | Version 1.11   |
   | ##  ## ### ### ##  ## ##  ##  |  VM2D: Vortex Method       | 2022/08/07     |
   | ##  ## ## # ##    ##  ##  ##  |  for 2D Flow Simulation    *----------------*
   |  ####  ##   ##   ##   ##  ##  |  Open Source Code                           |
   |   ##   ##   ## ###### #####   |  https://www.github.com/vortexmethods/VM2D  |
   |                                                                             |
   | Copyright (C) 2017-2022 Ilia Marchevsky, Kseniia Sokol, Evgeniya Ryatina    |
   *-----------------------------------------------------------------------------*
   | File name: defaults                                                         |
   | Info: Default values for various parameters                                 |
   \*---------------------------------------------------------------------------*/
   
   angle = 0.0;
   scale = 1.0;
   basePoint = {0.0, 0.0};

   linearSystemSolver = linearSystemGauss;
   velocityComputation = velocityBiotSavart;
   panelsType = panelsRectilinear; 
   boundaryConditionSatisfaction = boundaryConstantLayerAverage;
   fileType = binary;

   mechanicalSystem = mechanicsRigidImmovable;
   np = 1;

   airfoilsDir = "../settings/airfoils/";
   wakesDir = "../settings/wakes/";


3. **Высший приоритет.** Непосредственное указание значений параметров в паспорте задачи имеет высший приоритет, при этом значения по умолчанию для этих парасетров игнорируются.




Файл ``switchers``
------------------

Для упрощения читаемости значений некоторых ключей они в соответствующих файлах могут задаваться при помощи словесных выражений. Приведенное, к примеру, в предыдущем разделе значение ключа *mechanicalSystem*, заданное словом *mechanicsRigidImmovable*, означает, очевидно, что в качестве механической системы используется неподвижный и недеформируемый профиль. 

В то же время в исходном коде **VM2D** предполагается, что таким ключая отвечают целочисленные значения. Соответствие словесных выражений целочисленным значениям задается в файле ``switchers`` пример структуры которого приведен ниже.

.. code-block:: c
   :caption: switchers
   :name: switchers

   /*--------------------------------*- VM2D -*-----------------*---------------*\
   | ##  ## ##   ##  ####  #####   |                            | Version 1.11   |
   | ##  ## ### ### ##  ## ##  ##  |  VM2D: Vortex Method       | 2022/08/07     |
   | ##  ## ## # ##    ##  ##  ##  |  for 2D Flow Simulation    *----------------*
   |  ####  ##   ##   ##   ##  ##  |  Open Source Code                           |
   |   ##   ##   ## ###### #####   |  https://www.github.com/vortexmethods/VM2D  |
   |                                                                             |
   | Copyright (C) 2017-2022 Ilia Marchevsky, Kseniia Sokol, Evgeniya Ryatina    |
   *-----------------------------------------------------------------------------*
   | File name: switchers                                                        |
   | Info: Verbal notation for various parameters                                |
   \*---------------------------------------------------------------------------*/

   Impulse = 0;  //Импульсный старт потока
   RampLin = 1;  //Разгон потока по линейному закону
   RampCos = 2;  //Разгон потока по закону косинуса

   panelsRectilinear = 0;   //Прямолинейные панели
   panelsCurvilinear = 1;   //Криволинейные панели
   
   text = 0;                //Сохранение vtk-файлов в текстовом формате
   binary = 1;              //Сохранение vtk-файлов в бинарном формате

   linearSystemGauss = 0;      //Решение системы методом Гаусса
   linearSystemGMRES = 1;      //Решение системы методом GMRES
   linearSystemBiCGStab = 2;   //Решение системы методом BiCGStab
   linearSystemFMM = 3;        //Решение системы быстрым методом мультиполей

   mechanicsRigidImmovable = 0;   //Жесткое неподвижное недеформируемое тело
   mechanicsRigidGivenLaw = 1;    //Жесткое недеформируемое тело, движущееся по заданному закону
   mechanicsRigidOscillPart = 2;  //Жесткое недеформируемое тело с упругой связью, метод расщепления
   
   
Отметим, что приведенные параметры даны исключительно в качестве примера, не весь функционал может быть реализован в текущей версии программы (и наоборот, реальный файл может содержать намного большее количество различных параметров).

   

Файл ``mechanics``
------------------

Поскольку **VM2D** позволяет решать широкий класс задач, включая задачи гидроупругости, конкретный тип решаемой задачи следует указывать, задавая тип используемой *механической системы*. Доступные (реализованные программно) механические системы перечислены в файле ``mechanics``, где им поставлены в соответствие короткие имена-метки.

Пример структуры такого файла приведен ниже


.. code-block:: c
   :caption: switchers
   :name: switchers

   /*--------------------------------*- VM2D -*-----------------*---------------*\
   | ##  ## ##   ##  ####  #####   |                            | Version 1.11   |
   | ##  ## ### ### ##  ## ##  ##  |  VM2D: Vortex Method       | 2022/08/07     |
   | ##  ## ## # ##    ##  ##  ##  |  for 2D Flow Simulation    *----------------*
   |  ####  ##   ##   ##   ##  ##  |  Open Source Code                           |
   |   ##   ##   ## ###### #####   |  https://www.github.com/vortexmethods/VM2D  |
   |                                                                             |
   | Copyright (C) 2017-2022 Ilia Marchevsky, Kseniia Sokol, Evgeniya Ryatina    |
   *-----------------------------------------------------------------------------*
   | File name: mechanics                                                        |
   | Info: Dictionary with mechanical systems description                        |
   \*---------------------------------------------------------------------------*/

   mech0 = mechanicsRigidImmovable();
   mech1 = mechanicsRigidGivenLaw();
   mech2 = mechanicsRigidOscillPart(sh={0, $sh, 0}, m=$m);
   
Здесь два типа механических систем: *mechanicsRigidImmovable* и *mechanicsRigidGivenLaw* не имеют параметров (закон движения тела во втором случае задается непосредственно внутри кода **VM2D**), тогда как третья механическая система определяется двумя параметрами --- безразмерной частотой колебаний на упругих связях, которая обозначена символом *sh*, и массой тела *m*. Оба они заданы неявно, а через знак **$**, который означает разыменование параметра. Соответственно, выбирая для конкретной решаемой задачи данный тип механической системы, пользователь должен указать конкретные числовые значения для параметров *sh* и *m*.





